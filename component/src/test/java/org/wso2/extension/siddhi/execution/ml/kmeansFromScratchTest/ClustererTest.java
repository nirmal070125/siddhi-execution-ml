package org.wso2.extension.siddhi.execution.ml.kmeansFromScratchTest;

import javafx.scene.chart.PieChart;
import org.wso2.extension.siddhi.execution.ml.kmeansFromScratch.Clusterer;
import org.wso2.extension.siddhi.execution.ml.kmeansFromScratch.Coordinates;
import org.wso2.extension.siddhi.execution.ml.kmeansFromScratch.DataPoint;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * Created by niruhan on 7/11/17.
 */
public class ClustererTest {

    private static int dimensionality = 10;
    private static ArrayList<DataPoint> dataPointsArray = new ArrayList<>();
    private static ArrayList<DataPoint> a = new ArrayList<>();
    //private static double[][] data = new double[][]{{6.0,1.0},{1.0,5.0}, {5.0,2.0},
    //        {5.0,3.0},{6.0,3.0},{7.0,2.0},{2.0,4.0},{1.0,6.0},{2.0,6.0},{3.0,5.0},{3.0,6.0}};
    private static double[][] data = new double[][]{{3.7822, 8.5628, 6.2925, 3.174, 3.9813, 2.3958, 7.954, 1.8097, 4.7952, 9.4819}, {4.1482, 0.651, 4.7246, 0.9579, 2.8591, 5.816, 2.4733, 6.7363, 6.1698, 1.1032}, {7.6446, 6.4314, 7.4922, 2.3374, 4.2377, 6.5606, 4.336, 8.9123, 8.3426, 3.6088}, {6.631, 7.9883, 7.7384, 7.6186, 7.0576, 6.472, 8.0546, 0.3329, 9.6958, 6.6237}, {2.4904, 6.0469, 1.5966, 3.3024, 6.3397, 5.4904, 1.4618, 2.7172, 1.5747, 4.0881}, {1.3438, 7.598, 5.625, 9.0063, 2.0197, 0.7102, 7.0739, 3.128, 3.4252, 5.571}, {8.2836, 9.8595, 9.9717, 2.4348, 2.238, 6.2546, 8.8777, 5.0801, 5.3188, 4.6102}, {4.7325, 3.562, 3.6893, 1.4214, 7.4314, 1.2079, 4.3544, 8.9049, 8.1107, 3.5937}, {6.435, 7.9366, 9.089, 6.167, 7.7649, 5.6668, 7.6312, 4.4721, 3.4163, 3.3156}, {9.3336, 2.1958, 2.8769, 2.3884, 3.584, 6.7155, 5.4586, 5.2551, 2.0753, 8.1489}, {8.0883, 8.5995, 9.1845, 9.188, 7.6521, 0.2895, 0.3177, 8.0141, 5.3901, 5.0972}, {4.4922, 2.1405, 4.6579, 2.5397, 0.5621, 6.4244, 1.2801, 3.501, 2.2883, 3.3273}, {4.4736, 6.1237, 6.5954, 1.0893, 1.1007, 8.3686, 4.8004, 8.0879, 5.6852, 0.8944}, {3.3645, 4.9483, 8.6622, 2.0858, 9.7332, 8.1569, 7.0832, 4.941, 4.8975, 5.4236}, {9.3473, 7.0468, 3.0784, 6.4771, 3.2863, 6.4617, 1.6167, 0.3362, 3.5139, 5.1822}, {2.1707, 2.5743, 5.4095, 0.9888, 3.3324, 3.868, 7.1136, 2.7873, 7.3057, 7.5403}, {7.4471, 4.688, 6.0247, 4.6702, 0.7411, 2.8886, 1.7468, 8.7102, 8.6986, 9.8801}, {6.9677, 1.2127, 5.6508, 8.2951, 9.2398, 1.4132, 6.4156, 2.1741, 9.0521, 9.2805}, {1.6897, 6.7029, 1.3925, 5.3612, 8.1151, 8.5125, 7.3721, 4.0634, 8.9519, 4.5172}, {1.4605, 4.5234, 5.4422, 1.1191, 0.85, 4.1649, 7.2628, 9.2521, 4.3479, 4.6784}, {1.129, 0.9678, 6.2851, 2.3787, 2.3198, 1.6309, 0.4115, 4.5472, 8.7624, 6.9488}, {4.1311, 8.6186, 4.6436, 4.5833, 8.0559, 2.5131, 9.5951, 6.0416, 9.2775, 2.5021}, {6.4045, 1.0083, 9.5647, 3.3902, 3.3347, 0.2642, 0.4518, 9.567, 3.3256, 0.3164}, {2.0412, 2.7301, 7.7403, 8.6083, 5.6078, 8.8931, 5.6654, 1.4573, 8.9713, 1.3221}, {3.2096, 2.067, 0.39, 5.4378, 3.4849, 3.9509, 1.2825, 1.1462, 3.9189, 2.7979}, {2.0546, 2.5212, 4.0109, 4.6972, 2.3, 5.5894, 9.6619, 3.3747, 6.4252, 1.7213}, {5.0449, 4.0224, 5.8674, 3.2707, 0.908, 3.2118, 1.852, 2.1295, 9.5509, 2.8306}, {3.2306, 7.1623, 5.0255, 3.5124, 9.918, 6.2362, 0.85, 3.22, 5.8457, 6.8302}, {2.5016, 1.931, 8.7149, 1.1379, 7.9488, 9.9095, 5.9457, 4.03, 8.2629, 3.3268}, {9.0332, 4.6422, 3.6448, 3.7516, 0.3695, 9.2045, 9.0558, 7.765, 5.2702, 9.7575}, {25.7792, 26.0605, 23.564, 22.1243, 21.4162, 29.1463, 22.2255, 23.0748, 23.1976, 23.7685}, {23.5986, 26.9065, 23.5797, 20.79, 27.3767, 22.4831, 22.2864, 23.083, 25.3679, 22.3683}, {23.2557, 25.7238, 27.2568, 24.3924, 24.1303, 26.6946, 29.3968, 27.0803, 25.8257, 28.1354}, {23.4902, 23.5403, 20.4021, 28.5877, 26.4832, 27.7428, 29.8427, 23.737, 20.7433, 24.514}, {20.2976, 21.3068, 29.848, 27.4799, 21.1923, 28.4409, 27.1536, 27.7672, 20.0505, 20.5071}, {21.4455, 25.7073, 22.8235, 27.8319, 26.7375, 23.6722, 26.411, 26.2132, 26.7833, 29.1671}, {26.5864, 29.2693, 21.5883, 27.2593, 25.1673, 25.7296, 25.098, 25.2677, 21.7675, 25.7674}, {20.1587, 27.7374, 20.9567, 22.9737, 26.9467, 29.0799, 24.3652, 22.9977, 24.2158, 23.9622}, {29.9216, 28.1773, 28.1591, 23.2061, 23.9819, 25.6463, 28.4579, 24.1094, 27.8212, 24.644}, {28.7655, 23.4593, 24.6067, 20.9608, 25.196, 28.7043, 25.73, 26.6136, 22.3918, 29.3343}, {22.3398, 27.1343, 27.8522, 23.66, 24.2455, 25.5692, 25.4889, 26.348, 29.5443, 21.8794}, {26.0762, 23.8949, 22.9471, 20.2489, 21.244, 22.0069, 20.5572, 22.7412, 25.9959, 25.7517}, {22.7094, 28.7806, 20.3076, 29.1125, 23.6981, 23.4101, 28.7062, 23.2775, 21.2341, 22.6891}, {25.8421, 29.5107, 25.5913, 20.2205, 25.6299, 28.8433, 21.5201, 21.0126, 22.4566, 20.6402}, {26.3913, 26.168, 21.5084, 23.7507, 22.6962, 29.5777, 26.5422, 20.1494, 25.7608, 23.4799}, {28.4984, 21.9142, 27.7549, 24.0407, 20.0782, 22.6412, 21.8507, 25.3178, 26.2727, 29.2158}, {20.8028, 20.7734, 28.716, 22.0352, 22.7169, 25.0612, 26.4813, 26.0309, 25.8085, 28.3519}, {28.9145, 20.7872, 23.5937, 22.9417, 20.014, 21.598, 20.194, 20.3981, 29.8629, 27.6556}, {28.1712, 22.6174, 29.4688, 25.9237, 27.2828, 20.1713, 22.5408, 28.6274, 26.6685, 29.5729}, {22.5633, 29.4628, 22.2688, 21.7762, 29.7075, 26.341, 22.2102, 22.4303, 24.704, 26.0846}, {29.7382, 21.3951, 22.6171, 21.0116, 28.5879, 23.1659, 27.9828, 29.7632, 28.2137, 21.2783}, {29.1982, 23.1102, 27.9733, 28.5433, 24.7465, 27.4017, 22.8618, 29.525, 21.6096, 25.4432}, {20.2792, 26.2506, 27.6381, 24.387, 21.5881, 25.5644, 23.6554, 20.2851, 23.1762, 21.273}, {27.5286, 21.4019, 26.3888, 22.1965, 23.5708, 21.4996, 27.9869, 26.2009, 26.0374, 20.5252}, {24.1319, 22.7175, 28.882, 25.8437, 25.9588, 27.2293, 21.3596, 22.198, 21.5873, 26.4967}, {28.9487, 25.0607, 27.8034, 27.5589, 27.777, 23.8152, 26.7417, 25.846, 20.5092, 21.0753}, {24.6373, 27.5422, 26.9547, 21.1631, 28.6773, 24.3396, 20.1178, 26.0157, 23.4168, 28.9334}, {23.0095, 21.1072, 27.3545, 24.1876, 24.2867, 21.6193, 24.524, 26.3482, 23.7527, 20.4208}, {27.4626, 21.1813, 22.5658, 20.4784, 25.5829, 21.2226, 23.7783, 26.1984, 20.0858, 24.2592}, {23.1877, 25.9005, 26.0075, 20.0388, 21.3025, 26.1545, 29.6647, 26.2305, 28.6696, 21.0542}};
    public static void main(String[] args) {
        Clusterer myClusterer = new Clusterer(2, 10);



        for (int i=0; i<data.length; i++) {
            DataPoint p = new DataPoint(dimensionality);
            p.setCoordinates(data[i]);
            dataPointsArray.add(p);
        }

        myClusterer.initialize(dataPointsArray);
        //myClusterer.assignToCluster(dataPointsArray);

        /*for (DataPoint a: dataPointsArray) {
            System.out.print(Arrays.toString(a.getCoordinates()));
            System.out.print(" - ");
            System.out.println(Arrays.toString(a.getAssociatedCentroid().getCoordinates()));
        }*/

        ArrayList<Coordinates> newCen;
        //newCen = myClusterer.calculateNewCentroids();
        myClusterer.cluster(dataPointsArray);
        newCen = myClusterer.newCentroidList;
        for (Coordinates cen: newCen) {
            System.out.print(Arrays.toString(cen.getCoordinates()));
        }

        /*int k=2;
        ArrayList<double[]> total = new ArrayList<>();
        int[] count = new int[k];
        for (int i=0; i<k; i++) {
            count[i] = 0;
            total.add(new double[dimensionality]);
        }
        System.out.println(total.get(0));
        System.out.println(total.get(1));*/
        /*DataPoint p = new DataPoint(dimensionality);
        double[] x = new double[]{3,6};
        p.setCoordinates(x);
        int ind = dataPointsArray.indexOf(p);
        System.out.println(ind);*/
        /*double[] res = new double[2];
        Arrays.setAll(res, i -> data[3][i] + data[1][i]);
        System.out.println(Arrays.toString(res));*/
    }



}
